---
include:
  - docassemble.AssemblyLine:assembly_line.yml
---
metadata:
  title: >-
    Emergency Repair Request
  short title: >-
    Emergency Repair Request
  description: |-
    This interview helps someone in Minnesota draft an Emergency Repair Request Letter.
  can_I_use_this_form: |
    If you are a Minnesota Tennant, you can use this interview to draft a letter to your landlord requesting emergency repairs.
  before_you_start: |
    This interview will help you draft an Emergency Repair Request Letter.
    
    Before you get started, please gather:
    
    1. Landlord name
    2. Your Address
    3. Issue/ problem description
    
    When you are finished, you will need to:
    
    1. Sign the drafted form
    2. Send the letter to your landlord
  maturity: production
  estimated_completion_minutes: 5
  estimated_completion_delta: 5
  LIST_topics: 
    - "HO-00-00-00-00"
  tags:
    - "HO-00-00-00-00"
  authors:
    - Elisabeth Clagett
  original_form: []
  original_form_published_on: ""
  allowed_courts: []
  typical_role: "tenant"
  al_weaver_version: "1.11.0"
  generated_on: "2025-09-17"
  languages:
    - en
  jurisdiction: NAM-US-US+MN
  review_date: 2025-09-17
  form_titles:
    - Emergency Repair Request
  form_numbers: []
  update_notes: |
---
code: |
  # This controls the default country and list of states in address field questions
  AL_DEFAULT_COUNTRY = "US"
---
code: |
  # This controls the default state in address field questions
  AL_DEFAULT_STATE = "MN"
---
code: |
  github_repo_name =  'docassemble-EmergencyRepairRequest'
---
code: |
  interview_short_title = "Draft an Emergency Repair Request Letter"
---
code: |
  al_form_type = "letter" 
---
objects:
  - users: ALPeopleList.using(ask_number=True,target_number=1)
  - other_parties: ALPeopleList.using(there_are_any=True)
---
sections:
  - review_emergency_repair_request: Review your answers
---
#################### Interview order #####################
comment: |
  Controls order and branching logic for questions specific to this form
id: interview_order_emergency_repair_request
code: |
  # Set the allowed courts for this interview
  nav.set_section("review_emergency_repair_request")
  user_role = "tenant"
  user_ask_role = "tenant"
  users.gather()
  set_parts(subtitle=str(users))
  users[0].address.address
  other_parties.gather()
  set_progress(33)
  issue_description
  users[0].signature
  interview_order_emergency_repair_request = True
---
###################### Main order ######################
comment: |
  This block includes the logic for standalone interviews.
  Delete mandatory: True to include in another interview
mandatory: True
code: |
  al_intro_screen
  emergency_repair_request_intro
  interview_order_emergency_repair_request
  signature_date
  # Store anonymous data for analytics / statistics
  store_variables_snapshot(
      persistent=True,
      data={
          "zip": showifdef("users[0].address.zip"),
          "reached_interview_end": True,
      },
  )
  emergency_repair_request_download
---
id: Emergency_Repair_Request
continue button field: emergency_repair_request_intro
question: |
  Emergency Repair Request
subquestion: |
  This interview will help you draft an Emergency Repair Request Letter.
  
  Before you get started, please gather:
  
  1. Landlord name
  2. Your Address
  3. Issue/ problem description
  
  When you are finished, you will need to:
  
  1. Sign the drafted form
  2. Send the letter to your landlord

  If you are a Minnesota Tennant, you can use this interview to draft a letter to your landlord requesting emergency repairs.

  Most people take about 5 minutes to complete this interview.

---
id: ask_other_parties
question: |
  What is your landlord's name?
subquestion: |
  Your landlord may be a person (like an individual property owner) or a business (like a management company).  
  Please enter the information below. If there is more than one landlord, you can add them one at a time.
fields:
  - "Type of landlord": other_parties[i].landlord_type
    datatype: radio
    choices:
      - Person
      - Business/Organization
  - "First name": other_parties[i].name.first
    show if:
      variable: other_parties[i].landlord_type
      is: "Person"
  - "Last name": other_parties[i].name.last
    show if:
      variable: other_parties[i].landlord_type
      is: "Person"
  - "Organization name": other_parties[i].name.text
    show if:
      variable: other_parties[i].landlord_type
      is: "Business/Organization"

---

---
id: This is the issue s I am experiencing and a brief description of the problem
question: |
  This is the issue(s) I am experiencing and a brief description of the problem:
fields:
  - "Issue description": issue_description

---
id: preview emergency_repair_request
question: |
  Preview your form before you sign it
subquestion: |
  Here is a preview of the form you will sign on the next page.   
  
  ${ al_recipient_bundle.as_pdf(key='preview') }

  Click the image to open it in a new tab. Click the "Edit answers" button
  to edit your answers.

  ${ action_button_html(url_action('review_emergency_repair_request'), label='Edit answers', color='info') }
  
  Remember to come back to this window to continue and sign your form.
continue button field: emergency_repair_request_preview_question    
---
code: |
  signature_fields = ['users[0].signature']
---
id: emergency repair request review screen
event: review_emergency_repair_request
question: |
  Review your answers
review:
  - Edit: users.revisit
    button: |
      **Users**

      % for item in users:
        * ${ item }
      % endfor
  - Edit: other_parties.revisit
    button: |
      **Other parties**

      % for item in other_parties:
        * ${ item }
      % endfor
  - Edit: issue_description
    button: |
      **Issue description**:
      ${ issue_description }
---
continue button field: users.revisit
question: |
  Edit users
subquestion: |
  ${ users.table }

  ${ users.add_action() }
---
table: users.table
rows: users
columns:
  - Address: |
      row_item.address.block() if defined("row_item.address.address") else ""
  - Signature: |
      row_item.signature if defined("row_item.signature") else ""
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
edit:
  - address.address
  - signature
  - name.first
confirm: True

---
continue button field: other_parties.revisit
question: |
  Edit other_parties
subquestion: |
  ${ other_parties.table }

  ${ other_parties.add_action() }
---
table: other_parties.table
rows: other_parties
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
edit:
  - name.first
confirm: True

---
id: download emergency_repair_request
event: emergency_repair_request_download
question: |
  All done
subquestion: |
  Thank you ${users}. Your form is ready to download and deliver.
  
  View, download and send your form below. Click the "Edit answers" button to fix any mistakes.

  ${ action_button_html(url_action('review_emergency_repair_request'), label='Edit answers', color='info') }
  
  
  ${ al_user_bundle.download_list_html() }
  

  ${ al_user_bundle.send_button_html(show_editable_checkbox=True) }

progress: 100
---
# ALDocument objects specify the metadata for each template
objects:
  - emergency_repair_request_Post_interview_instructions: ALDocument.using(title="Instructions", filename="emergency_repair_request_next_steps.docx", enabled=True, has_addendum=False)
  - emergency_repair_request_attachment: ALDocument.using(title="Emergency Repair Request", filename="emergency_repair_request", enabled=True, has_addendum=False, )
---
# Bundles group the ALDocuments into separate downloads, such as for court and for the user
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[emergency_repair_request_Post_interview_instructions, emergency_repair_request_attachment], filename="emergency_repair_request", title="All forms to download for your records", enabled=True)
  - al_recipient_bundle: ALDocumentBundle.using(elements=[emergency_repair_request_attachment],  filename="emergency_repair_request", title="All forms to file", enabled=True)
---
# Each attachment defines a key in an ALDocument. We use `i` as the placeholder here so the same template is 
# used for "preview" and "final" keys, and logic in the template checks the value of 
# `i` to show or hide the user's signature
attachment:
  name: Post-interview-Instructions
  filename: emergency_repair_request_next_steps
  docx template file: emergency_repair_request_next_steps.docx
  variable name: emergency_repair_request_Post_interview_instructions[i]
  skip undefined: True
  tagged pdf: True
---
attachment:
  name: emergency repair request
  filename: emergency_repair_request
  variable name: emergency_repair_request_attachment[i]
  skip undefined: True
  docx template file: emergency_repair_request.docx
  tagged pdf: True



